{
  "title": "NoSQL Datenbanken - Wissensfragen",
  "introduction": "NoSQL steht für \"Not only SQL\" und bezeichnet eine Vielzahl von Datenbankmanagementsystemen, die sich von traditionellen relationalen Datenbanken unterscheiden. Der Begriff \"NoSQL\" bedeutet nicht zwangsläufig \"kein SQL\", sondern betont, dass diese Systeme zusätzlich zu SQL-basierten Datenbanken existieren. NoSQL Datenbanken sind in der Regel nicht relational und verzichten auf starre Schemata. Dadurch sind sie flexibler und können besser mit sich ändernden Anforderungen umgehen.",
  "questions": [
    {
      "question": "1. Was sind NoSQL Datenbanken?",
      "answer": "NoSQL steht für 'Not only SQL' und bezeichnet eine Vielzahl von Datenbankmanagementsystemen, die sich von traditionellen relationalen Datenbanken unterscheiden. Der Begriff 'NoSQL' bedeutet nicht zwangsläufig 'kein SQL', sondern betont, dass diese Systeme zusätzlich zu SQL-basierten Datenbanken existieren. NoSQL-Datenbanken sind in der Regel nicht relational und verzichten auf starre Schemata. Dadurch sind sie flexibler und können besser mit sich ändernden Anforderungen umgehen. NoSQL-Datenbanken können allgemein in folgende Kategorien eingeteilt werden: Dokumentenorientierte Datenbanken, Graphdatenbanken, Spaltenorientierte Datenbanken, Schlüssel-Wert-Datenbanken."
    },
    {
      "question": "2. Was ist eine horizontale Skalierung und was bedeutet eine vertikale Skalierung?",
      "answer": "Horizontale Skalierung heißt, dass man weitere gleichartige Hardware zu einem bestehenden System hinzufügt. Bei vertikaler Skalierung wird die Hardware eines Systems durch leistungsstärkere ersetzt."
    },
    {
      "question": "3. Was sind die ACID Eigenschaften?",
      "answer": "Atomicity (Atomarität): Eine Transaktion wird entweder vollständig ausgeführt oder gar nicht. Es gibt keine Zwischenzustände.\nConsistency (Konsistenz): Die Datenbank befindet sich immer in einem konsistenten Zustand. Dies bedeutet, dass die Datenbank nach einer Transaktion in einen gültigen Zustand übergeht.\nIsolation (Isolation): Transaktionen werden unabhängig voneinander ausgeführt. Dies bedeutet, dass eine Transaktion nicht von einer anderen Transaktion beeinflusst werden kann.\nDurability (Dauerhaftigkeit): Nachdem eine Transaktion abgeschlossen wurde, bleiben die Daten dauerhaft in der Datenbank gespeichert."
    },
    {
      "question": "4. Was sind Schlüssel-Wert-Datenbanken und wofür werden sie verwendet?",
      "answer": "Das Schlüssel-Wert-Datenbankmodell ist wie eine Sammlung von Dictionaries oder JSON-Einträgen aufgebaut. Jeder Eintrag hat einen eindeutigen Schlüssel, der einem bestimmten Wert zugeordnet ist. Verwendungszwecke sind: Caching: Schlüssel-Wert-Datenbanken sind ideal für das Zwischenspeichern häufig abgerufener Daten, um Antwortzeiten zu verbessern. Session Storage: In Webanwendungen können sie für die temporäre Speicherung von Sitzungsinformationen verwendet werden. Konfigurationsmanagement: Sie eignen sich gut für die Speicherung von Konfigurationsdaten, die schnell abgerufen werden müssen. Benutzerpräferenzen: Das Modell kann für die Verwaltung von Benutzereinstellungen oder Präferenzen genutzt werden."
    },
    {
      "question": "5. Was sind dokumentenorientierte Datenbanken?",
      "answer": "Dokumentenorientierte Datenbanken speichern Daten in semi-strukturierten Dokumenten, oft im JSON- oder BSON-Format. Dies ermöglicht eine einfache Handhabung von komplexen Datenstrukturen und eine schnelle Anpassung an sich ändernde Anforderungen. Dokumentenorientierte Datenbanken sind besonders gut für Anwendungen geeignet, die mit großen Mengen von Daten arbeiten, wie zum Beispiel Content-Management-Systeme, E-Commerce-Plattformen und Anwendungen im IoT-Bereich. Ein Beispiel hierfür ist die Speicherung von Daten aus Formularen, die von Benutzern ausgefüllt werden. Die Daten können in einem Dokument gespeichert werden, ohne dass ein Schema definiert werden muss."
    },
    {
      "question": "6. Was sind Graphdatenbanken?",
      "answer": "Graphdatenbanken verwenden Graphen, um Beziehungen zwischen Entitäten darzustellen. Diese eignen sich besonders gut für Anwendungen, bei denen die Beziehungen zwischen den Datenpunkten von zentraler Bedeutung sind, wie zum Beispiel in sozialen Netzwerken. Graphdatenbanken sind in der Regel besonders effizient bei der Verarbeitung von komplexen Abfragen, die mehrere Beziehungen zwischen den Datenpunkten umfassen."
    },
    {
      "question": "7. Was sind spaltenorientierte Datenbanken?",
      "answer": "Spaltenorientierte Datenbanken speichern Daten spaltenweise anstelle von zeilenweise. In herkömmlichen Datenbanken werden Daten als zweidimensionale Tabellen aus Zeilen und Spalten dargestellt. Diese müssen jedoch in einer eindimensionalen Form auf der Festplatte und im Arbeitsspeicher des Computers gespeichert werden. Die spaltenorientierte Datenbank löst diese Herausforderung, indem sie die Daten spaltenweise abspeichert. Spaltenorientierte Systeme bieten Vorteile bei Anwendungen wie Data Warehousing, bei denen Aggregate über große Mengen ähnlicher Elemente gebildet werden. Der effiziente Zugriff auf Festplattendaten steht im Fokus von Vergleichen zwischen zeilenorientierten und spaltenorientierten Systemen. Ein Megabyte sequentiell gespeicherter Daten kann genauso lange dauern wie ein einzelner Direktzugriff."
    },
    {
      "question": "8. Was ist ein Docker Container?",
      "answer": "Ein Container ist eine isolierte Umgebung, die alle Abhängigkeiten und Konfigurationen enthält, die für die Ausführung der Anwendung erforderlich sind. Über eine App kann also nur auf den Container, nicht aber auf den gesamten Server zugegriffen werden."
    },
    {
      "question": "9. Was sind Docker Images? Und welche Bestandteile beinhalten sie?",
      "answer": "Docker Images sind schreibgeschützte Vorlagen, die die Anweisungen zur Erstellung eines Docker-Containers enthalten. Ein Docker-Image beinhaltet alles, was für das Ausführen einer Anwendung benötigt wird – den Code, eine Laufzeitumgebung, Bibliotheken, Umgebungsvariablen und Konfigurationsdateien. Wenn ein Container gestartet wird, wird das Docker-Image als Basis verwendet, um eine laufende Instanz – den Container – zu erstellen. Das ist in etwa so zu verstehen, als würde eine Instanz aus einer Klasse erstellt werden. Einmal erstellt, wird ein Image nicht mehr verändert. Änderungen erfolgen durch Erstellen eines neuen Images, das auf dem bestehenden Image basiert. Docker-Images können auf jedem System ausgeführt werden, das Docker unterstützt, unabhängig von der zugrunde liegenden Infrastruktur. Dies gewährleistet Konsistenz über verschiedene Umgebungen hinweg."
    },
    {
      "question": "10. Bonus: Was ist der Unterschied zwischen Image und Container?",
      "answer": "Wenn ein Container gestartet wird, wird das Docker-Image als Basis verwendet, um eine laufende Instanz – den Container – zu erstellen. Das ist in etwa so zu verstehen, als würde eine Instanz aus einer Klasse erstellt werden."
    },
    {
      "question": "11. Wie unterscheiden sich Docker-Container von virtuellen Maschinen?",
      "answer": "Docker-Container sind isoliert, teilen sich jedoch den Kernel des Host-Betriebssystems, was zu einem geringeren Ressourcenverbrauch und schnelleren Startzeiten im Vergleich zu virtuellen Maschinen führt. Container sind hochportabel und können auf jedem System ausgeführt werden, das Docker unterstützt. Sie bieten eine konsistente Laufzeitumgebung, unabhängig vom zugrunde liegenden Betriebssystem."
    },
    {
      "question": "12. Was ist ein Dockerfile?",
      "answer": "Ein Dockerfile ist eine Textdatei, die eine Reihe von Anweisungen enthält, die beschreiben, wie das Image aufgebaut werden soll. Diese Anweisungen können das Hinzufügen von Dateien, das Ausführen von Befehlen und das Setzen von Umgebungsvariablen umfassen. Ein Dockerfile besteht aus Anweisungen, die jeweils in einer eigenen Zeile stehen. Diese Anweisungen werden von oben nach unten ausgeführt. Der Dateiname ist dockerfile ohne Endung. Die Datei liegt im Arbeitsverzeichnis der Anwendung."
    },
    {
      "question": "13. Was ist der erste Befehl in einem Dockerfile und wofür wird er verwendet?",
      "answer": "FROM: Gibt das Basis-Image an, auf dem das neue Image aufgebaut wird. Dies ist normalerweise die erste Anweisung in einem Dockerfile."
    },
    {
      "question": "14. Was ist der Unterschied zwischen den Befehlen COPY und ADD?",
      "answer": "Der Hauptunterschied zwischen COPY und ADD in Docker besteht darin, dass ADD zusätzliche Funktionen bietet, die COPY nicht hat, insbesondere das Verarbeiten von URLs und das automatische Extrahieren von Archiven."
    }
  ]
}
