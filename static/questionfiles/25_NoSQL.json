{
  "title": "NoSQL - Wissensfragen",
  "questions": [
    {
      "question": "1. Was sind NoSQL Datenbanken? Erkläre insbesondere die Vorteile und Unterschiede zu SQL-Datenbanken.",
      "answer": "NoSQL steht für \"Not only SQL\". Damit wird eine Vielzahl von Datenbanksystmen bezeichnet,die Unterschiede zur relationen Datenbanksystemen aufweisen. So verfügen sie in der Regel nicht über ein starres Schema und haben vielfältige Strukturen. Sie lassen sich in der Regel einfacher horizontal skalieren als SQL Datenbanken, d.h. dass weitere gleichartige Hardware einem bestehenden System angefügt werden kann. Im Gegensatz zu SQL Datenbanken müssen No SQL Datenbank nicht unbedingt die ACID Eigenschaften erfüllen. Es gibt jedoch auch einige Datenbanken, die diese Eigenschaften erfüllen, z.B. Mongo DB und Couchbase, andere wiederum. wie Redis verzichen auf ACID Eigenschaften um höhrere Performance zu erreichen. Es ist  vor dem Einsatz zu Prüfen ob die ACID Eigenschaften für die Anwendung relevant sind und ob diese von der jeweiligen NoSQL DB erfüllt werden. Konkrete Anwendungsfälle für NoSQL Datenbanken sind"
    },
    {
      "question": "2. Was versteht man unter horizontal und vertikaler Skalierung? Warum ist hochizontale Skalierung bei NoSQL Datenbanken einfacher möglich als bei relationälen Datenbanken? Gehe dabei insbesondere auf die Architektur ein, die dies ermöglicht.",
      "answer": "Horizontale Skalierung bedeutet, dass weitere gleichartige Hardware zu einem bestehenden System hinzugefügt wird. Bei vertikaler Skalieriung wird die Hardware eines Systems durch leistungsstärkere ersetzt. NoSQL Datenbanken setzen meist auf die Primary-Secondary-Architekur. Diese zielt auf Redundanz und hohe Verfügbarkeit ab. In dieser Architektur gibt es eine primäre DB-Instanz und mehrere sekundäre DB-Instanzen. Die primäre DB-Instanz ist die Hauptdatenbank für Lese- und Schreibzugriffe. Die sekundären Instanzen replizieren die Daten der Primärinstanz. Dies ermöglicht eine Lastverteilung auf mehrere Server. Wenn die primäre Instanz ausfällt wird eine der sekundären Instanzen zur priämren Instanz, um die Verfügbarkeit zu gewährleisten. Somit kann bei einer horizontalen Skalierung einfach die Primäre Instanz auf die Leistungsfähigere Hardware umgeschwenkt werden."
    },
    {
      "question": "3. Nenne 4 unterschiedliche Arten von No SQL Datenbanken.",
      "answer": "Vier relevante NoSQL-Datenbanken sind Key-Value Stores, Document Stores, Graphen Datenbanken und Wide Column Stores.\n\nKeyValue-Stores  speichern Schlüssel-Wert-Paare, d.h. jeder Eintrag hat einen eindeutigen Schlüssel, dem ein bestimmter Wert zugeordnet ist.\nVorteile: einfach und benutzerfreundlich, ermöglichen über Schlüssel schnelle Lese- und Schreibzugriffe.\nNachteile: begrenzte Abfragefähigkeit, wenige Möglichkeiten zur Datenmodellierung komplexer Strukturen und Beziehungen\nAnwendungsfälle: Caching (zur Antwortzeitverbessung), Session Storage, Konfigurationsmanamgent und Benutzerpräferenzen\nBeispiele: Redis, DynamoDB, Riak\n\nDokumentorientiere Datenbanken speichern Daten in semi-struktierten Dokumenten, oft im JSON- oder BSON-Format.\nVorteile: einfache Handhabung komplexer Datenstrukturen, schnelle Anpassung an geänderte Strukturen und Anforderungen\nAnwendung: Wenn Struktur nicht von vornherein feststeht oder sich zwischen Dokumenten unterscheidet: Formulardaten von Benutzern;  bei großen Datenmengen: E-Commerce-Plattformen, IOT-Anwendungen, Content-Management-Systeme\nBeispiele: MongoDB, CouchDB, Couchbase\n\nGraphendatenbanken verwenden Graphen zur Darstellung von Beziehungen zwischen Entitäten. Statt der Tabellenstruktur werden Konten und Kanten zur Speicherung verwendet. Knoten repräsentieren dabei Entitäten und Kanten die Beziehungen zwischen den Knoten. Kanten können sowohl gerichtet als auch ungerichtet sein und Eigenschaften enthalten, welche die Beziehungen klassifizieren.\nVorteile: Besonders effizient bei komplexen Abfragen, die mehrere Beziehungen von Datenpunkten umfassen.\nAnwendung: soziale Netzwerke und andere Anwendungen, bei denen die Beziehungen zwischen Knoten von zentraler Bedeutung sind.\nBeispiele: Neo4j, OrientDB, ArangoDB\n\nWide Column Storages (Spaltenorientierte DB) speichern Daten spaltenweise. Somit werden die Daten generell eindimensional verarbeitet und müssen nicht erst umgewandelt werden um auf der Festplatte oder im Arbeitsspeicher gespeichert zu werden.\nVorteile: Verarbeitung großer Datenmengen möglich,  effizienter Zugriff auf Festplattendaten\nAnwendung: OLAP-Aufgaben (analytische Informationssysteme)\nBeispiele: Cassandra, HBase, Vertica"
    },
    {
      "question": "4. Erläutere die spezifischen Eigenschaften von Key-Value Stores, sowie ihre Vorteile und ggf. Nachteile. Nenne jeweils 3 Anwendungsmöglichkeiten, gib zusätzlich je ein Beispiel für eine solche DB.",
      "answer": "KeyValue-Stores  speichern Schlüssel-Wert-Paare, d.h. jeder Eintrag hat einen eindeutigen Schlüssel, dem ein bestimmter Wert zugeordnet ist.\nVorteile: einfach und benutzerfreundlich, ermöglichen über Schlüssel schnelle Lese- und Schreibzugriffe.\nNachteile: begrenzte Abfragefähigkeit, wenige Möglichkeiten zur Datenmodellierung komplexer Strukturen und Beziehungen\nAnwendungsfälle: Caching (zur Antwortzeitverbessung), Session Storage, Konfigurationsmanamgent und Benutzerpräferenzen\nBeispiele: Redis, DynamoDB, Riak"
    },
    {
      "question": "5. Erläutere die spezifischen Eigenschaften von dokumentorientieren Datenbanken, sowie ihre Vorteile und ggf. Nachteile. Nenne jeweils 3 Anwendungsmöglichkeiten, gib zusätzlich je ein Beispiel für eine solche DB.",
      "answer": "Dokumentorientiere Datenbanken speichern Daten in semi-struktierten Dokumenten, oft im JSON- oder BSON-Format.\nVorteile: einfache Handhabung komplexer Datenstrukturen, schnelle Anpassung an geänderte Strukturen und Anforderungen\nAnwendung: Wenn Struktur nicht von vornherein feststeht oder sich zwischen Dokumenten unterscheidet: Formulardaten von Benutzern;  bei großen Datenmengen: E-Commerce-Plattformen, IOT-Anwendungen, Content-Management-Systeme\nBeispiele: MongoDB, CouchDB, Couchbase"
    },
    {
      "question": "6. Erläutere die spezifischen Eigenschaften von Graphendatenbanken, sowie ihre Vorteile und ggf. Nachteile. Nenne jeweils 3 Anwendungsmöglichkeiten, gib zusätzlich je ein Beispiel für eine solche DB.",
      "answer": "Graphendatenbanken verwenden Graphen zur Darstellung von Beziehungen zwischen Entitäten. Statt der Tabellenstruktur werden Konten und Kanten zur Speicherung verwendet. Knoten repräsentieren dabei Entitäten und Kanten die Beziehungen zwischen den Knoten. Kanten können sowohl gerichtet als auch ungerichtet sein und Eigenschaften enthalten, welche die Beziehungen klassifizieren.\nVorteile: Besonders effizient bei komplexen Abfragen, die mehrere Beziehungen von Datenpunkten umfassen.\nAnwendung: soziale Netzwerke und andere Anwendungen, bei denen die Beziehungen zwischen Knoten von zentraler Bedeutung sind.\nBeispiele: Neo4j, OrientDB, ArangoDB"
    },
    {
      "question": "7. Erläutere die spezifischen Eigenschaften von spaltenorientierten Datenbanken (Wide Column Storages), sowie ihre Vorteile und ggf. Nachteile. Nenne jeweils 3 Anwendungsmöglichkeiten, gib zusätzlich je ein Beispiel für eine solche DB.",
      "answer": "Wide Column Storages (Spaltenorientierte DB) speichern Daten spaltenweise. Somit werden die Daten generell eindimensional verarbeitet und müssen nicht erst umgewandelt werden um auf der Festplatte oder im Arbeitsspeicher gespeichert zu werden.\nVorteile: Verarbeitung großer Datenmengen möglich,  effizienter Zugriff auf Festplattendaten\nAnwendung: OLAP-Aufgaben (analytische Informationssysteme)\nBeispiele: Cassandra, HBase, Vertica"
    },
    {
      "question": "8. Was sind die grundlegenden ACID-Prizipien? Erläutere diese und ihre Bedeutung für Datenbanktransaktionen? Nenne 2 Beispiele für NoSQL Datenbanken die diese Kriterien erfüllen und mindestens ein Beispiel, das auf die ACID Eigenschaften verzichtet.",
      "answer": "Die vier ACID-Eigenschaften sind Atomicity (Atomarität), Consistency\n(Konsistenz), Isolation, Durabiltiy (Dauerhaftigkeit).\n\nAtomarität bedeutet, dass eine Transaktion entweder vollständig oder gar nicht ausgeführt wird. Es gibt keine Zwischenzustände.\n\nKonsistenz heißt, dass sich die Datenbank immer in einem konsistenten Zustand befindet. Dies bedeutet, dass die Datenbank nach einer Transaktion immer in einen gültigen Zustand übergeht.\n\nIsolation heißt, das Transaktionen unabhängig voneinander ausgeführt. Dies bedeutet, dass eine Transaktion nicht von einer anderen Transaktion beeinflusst werden kann.\n\nDauerhaftigkeit heißt, dass nach dem Transaktionen abgeschlossen wurden, die Daten dauerhaft ind der Datenbank gespeichert sind.\n\nBeispiele mit ACID: Mongo DB, Couchbase\nBeispiel ohne ACID: Redis"
    },
    {
      "question": "9. Welche Herausforderungen und Limitationen gibt es bei der Anwendung von NoSQL-Datenbanken?",
      "answer": "Es ist notwendig, sich beim Einsatz von NoSQL Datenbanken genau mit dem Einsatzzweck zu beschäftigen, da diese typischerweise keine starre Struktur /keine starren Schemata haben. So muss der Entwickler selbst entscheiden, ob bestimmte Konventionen bzgl. der gespeicherten Daten eingehalten werden sollen, z.B. um die Daten durchsuchen oder zu sortieren. Dies muss bei der Entwicklung berücksichtigt werden. Außerdem erfüllen viele NoSQL Datenbanken nicht die ACID-Attribute. Sollten diese nicht erfüllt sein, muss sich der Entwickler intensiv damit beschäftigen, wie mit bestimmten (Fehler-)Zuständen umgegangen werden soll, z.B. wenn keine Isolation der Transaktionen voneinander stattfindet, wie mit unvollständig ausgeführten Transaktionen verfahren werden soll oder was mit ggf. vorhandenen inkonsistenten Daten/Datenbanken geschehen werden soll."
    }
  ],
  "conclusion": "Diese Fragen sollen dir helfen, dein Verständnis zu pymongo zu vertiefen. Übe, indem du die Antworten auf diese Fragen in eigenen Worten erklärst und selbst Codebeispiele erstellst!"
}
